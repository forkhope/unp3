#### select() Function ####
This function allows the process to instruct the kernel to wait for any one
of multiple events to occur and to wake up the process only when one or
more of these events occurs or when a specified amount of time has passed.
#include <sys/select.h>
#include <sys/time.h>
int select(int maxfdp1, fd_set *readset, fd_set *writeset,
        fd_set *exceptset, const struct timeval *timeout);
    Returns: positive count of ready descriptors, 0 on timeout, -1 on error

We start our description of this function with its final argument, which
tells the kernel how long to wait for one of the specified descriptors to
become ready. A timeval structure specifies the number of seconds and
microseconds.
    struct timeval {
        long tv_sec;        /* seconds */
        long tv_usec;       /* microseconds */
    };
There are three possibilities:
1. Wait forever--Return only when one of the specified descriptors is ready
for I/O. For this, we specify the timeout arguments as a null pointer.
2. Wait up to a fixed amount of time--Return when one of the specified
descriptors is ready for I/O, but do not wait beyond the number of seconds
and microseconds specified in the timeval structure pointed to by the
timeout argument.
3. Do not wait at all--Return immediately after checking the descriptors.
This is called polling. To specify this, the timeout argument must point to
a timeval structure and the timer value (the number of seconds and
microseconds specified by the strucutre) must be 0.

The wait in the first two scenarios is normally interrupted if the process
catches a signal and returns from the signal handler.

The const qualifier on the timeout argument means it is not modified by
select() on return. For example, if we specify a time limit of 10 seconds,
and select() returns before the timer expires with one or more of the
descriptors ready or with an error of EINTR, the timeval structure is not
updated with the number of seconds remaining when the function returns. If
we wish to know this value, we must obtain the system time before calling
select(), and then again when it returns, and subtract the two.
    Some Linux versions modify the timeval structure. Therefore, for
    protability, assume the timeval structure is undefined upon return, and
    initialize it before each call to select(). POSIX specifies the const
    qualifier. Debian 7的"man select"手册确实提到: select() may update the
    timeout argument to indicate how much time was left.

The three middle arguments, readset, writeset, and exceptset, specify the
descriptors that we want the kernel to test for reading, writing, and
exception conditions. There are only two exception conditions currently
supported:
(1) The arrival of out-of-band data for a socket.
(2) The presence of control status information to be read from the master
side of a pseudo-terminal that has been put into packet mode.

A design problem is how to specify one or more descriptor values for each
of these three arguments. select() uses descriptor sets, typically an array
of inteers, wich each bit in each integer corresponding to a descriptor.
For example, using 32-bit integers, the first element of the array
corresponds to descriptors 0 through 31, the second element of the array
corresponds to descriptors 32 through 63, and so on. All the implementation
details are irrelevant to the application and are hidden in the fd_set
datatype and the following four macros:
  void FD_ZERO (fd_set *fdset);   // clear all bits in fdset
  void FD_SET(int fd, fd_set *fdset); // turn on the bit for fd in fdset
  void FD_CLR(int fd, fd_set *fdset); // turn off the bit for fd in fdset
  int FD_ISSET(int fd, fd_set *fdset); // is the bit for fd on in fdset?
We allocate a descriptor set of the fd_set datatype, we set and test the
bits in the set using these macros, and we can also assign it to another
descriptor set across an equals sign (=) in C.

It is important to initialize the set, since unpredictable results can
occur if the set is allocated as an automatic variable and not initialized.

Any of the middle three arguments to select(), readset, writeset, or
exceptset, can be specified as a null pointer if we are not interested in
that condition. Indeed, if all three pointers are null, then we have a
higher precision timer than the normal Unix sleep() function.

The maxfdp1 argument specifies the number of descriptors to be tested. Its
value is the maximum descriptor to be tested plus one. The descriptors 0,
1, 2, up through and including maxfdp1-1 are tested.

The constant FD_SETSIZE, defined by including <sys/select.h>, is the number
of descriptors in the fd_set datatype. Its value is often 1024, but few
programs use that many descriptors. The maxfdp1 argument forces us to
calculate the largest descriptor that we are interested in and then tell
the kernel this value.

select() modifies the descriptor sets pointed to by the readset, writeset,
and exceptset pointers. These three arguments are value-result arguments.
When we call the function, we specify the values of the descriptors that we
are interested in, and on return, the result indicates which descriptors
are ready. We use the FD_ISSET macro on return to test a specific descriptor
in an fd_set structure. Any descriptor that is not ready on return will have
its corresponding bit cleared in the descriptor set. To handle this, we turn
on all the bits in which we are interested in all the descriptor sets each
time we call select().

The return value from this function indicates the total number of bits
that are ready across all the descriptor sets. If the timer value expires
before any of the descriptors are ready, a value of 0 is returned. A return
value of -1 indicates an error (which can happen, for example, if the
function is interrupted by a caught signal).

#### Under What Conditions Is a Descriptor Ready? ####
File descriptors for regular files always return ready for reading, writing,
and exception condition. 即,普通文件的读写操作总是被认为是可读,可写.
We must be more specific about the conditions that cause select() to
return "ready" for sockets.
(1) A socket is ready for reading if any of the following four conditions
is true:
  a. The number of bytes of data in the socket receive buffer is greater
  than or equal to the current size of the low-water mark for the socket
  receive buffer. A read operation on the socket will not block and will
  return a value greater than 0 (i.e., the data that is ready to be read).
  We can set this low-water mark using the SO_RCVLOWAT socket option. It
  defaults to 1 for TCP and UDP sockets.
  b. The read half to the connection is closed (i.e., a TCP connection that
  has received a FIN). A read operation on the socket will not block and
  will return 0 (i.e., EOF).
  c. The socket is a listening socket and the number of completed
  connections is nonzero. An accept() on the listending socket will normally
  not block.
  d. A socket error is pending. A read operation on the socket will not
  block and will return an error (-1) with errno set to the specific error
  condition. These pending errors can also be fetched and cleared by calling
  getsockopt() and specifying the SO_ERROR socket option.
2. A socket is ready for writing if any of the following four conditions
is true:
  a. The number of bytes of available space in the socket send buffer is
  greater than or equal to the current size of the low-water mark for the
  socket send bufffer and either: (i) the socket is connected, or (ii) the
  socket does not require a connection (e.g., UDP). This means that if we
  set the socket to nonblocking, a write operation will not block and will
  return a positive value (e.g., the number of bytes accepted by the
  transport layer). We can set this low-water mark using the SO_SNDLOWAT
  socket option. This low-water mark normally defaults to 2048 for TCP and
  UDP sockets.
  b. The write half of the connection is closed. A write operation on the
  socket will generate SIGPIPE.
  c. A socket using a non-blocking connect() has completed the connection,
  or the connect() has failed.
  d. A socket error is pending. A write operation on the socket will not
  block and will return an error (-1) with errno set to the specific error
  condition. These pending errors can also be fetched and cleared by
  calling getsockopt() with the SO_ERROR socket option.
3. A socket has an exception condition pending if there is out-of-band data
for the socket or the socket is still at the out-of-band mark.

Notice that when an error occurs on a socket, it is marked as both readable
and writable by select().

The purpose of the receive and send low-water marks is to give the
application control over how much data must be available for reading or how
much space must be available for writing before select() returns a readable
or writable status.

As long as the send low-water mark for a UDP socket is less than the send
buffer size (which should always be the default relationship), the UDP
socket is always writable, since a connection is not required.

Figure 6.7. Summary of conditions that cause a socket to be ready for select
 --------------------------------------------------------------------------
 |               Condition                 |Readable?|Writable?|Exception?|
 |=========================================================================
 |Data to read                             |    *    |         |          |
 |Read half of the connection closed       |    *    |         |          |
 |New connection ready for listening socket|    *    |         |          |
 |-------------------------------------------------------------------------
 |Space available for writing              |         |    *    |          |
 |Write half of the connction closed       |         |    *    |          |
 |-------------------------------------------------------------------------
 |Pending error                            |    *    |    *    |          |
 |-------------------------------------------------------------------------
 |TCP out-of-band data                     |         |         |     *    |
 |-------------------------------------------------------------------------
