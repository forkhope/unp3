The connect() function is used by a TCP client to establish a connection
with a TCP server.
#include <sys/socket.h>
int connect(int sockfd, const struct sockaddr *srvaddr, socklen_t addrlen);
        Returns: 0 if OK, -1 on error
sockfd is a socket descriptor returned by the socket() function. The second
and third arguments are a pointer to a socket address structure and its
size. The socket address structure must contain the IP address and port
number of the server.

The client does not have to call bind() before calling connect(): the kernel
will choose both an ephemeral port and the source IP address if necessary.

In the case of a TCP socket, the connect() function initiates TCP's three-
way handshake. The function returns only when the connection is established
or an error occurs. There are several different error returns possible.
1. If the client TCP receives no response to its SYN segment, ETIMEDOUT is
   returned. 4.4BSD, for example, sends one SYN when connect() is called,
   another 6 seconds later, and another 24 seconds later. If no response is
   received after a total of 75 seconds, the error is returned.
2. If the server's response to the client's SYN is a reset (RST), this
   indicates that no process is waiting for connections on the server host
   at the port specified (i.e., the server process is probably not running).
   This is a hard error and the error ECONNREFUSED is returned to the client
   as soon as the RST is received.
   An RST is a type of TCP segment that is sent by TCP when something is
   wrong. Three conditions that generate an RST are: when a SYN arrives for
   a port that has no listening server, when TCP wants to abort an existing
   connection, and when TCP receives a segment for a connection that does
   not exist.
ECONNREFUSED错误码对应的出错字符串是: "Connection refused".
3. If the client's SYN elicits an ICMP "destination unreachable" from some
   intermediate router, this is considered a soft error. The client kernel
   saves the message but keeps sending SYNs with the same time between each
   SYN as in the first scenario. If no response is received after some fixed
   amount of time (75 seconds for 4.4BSD), the saved ICMP error is returned
   to the process as either EHOSTUNREACH or ENETUNREACH. It is also possible
   that the remote system is not reachable by any route in the local
   system's forwarding table, or that the connect() call returns without
   waiting at all.
   Many earlier systems, such as 4.2BSD, incorrectly aborted the connection
   establishment attempt when the ICMP "destination unreachable" was
   received. This is wrong because this ICMP error can indicate a transient
   condition. For example, it could be that the condition is caused by a
   routing problem that will be corrected.

In terms of the TCP state transition diagram, connect() moves from the
CLOSED state (the state in which a socket begins when it is created by the
socket() function) to the SYN_SENT state, and then, on success, to the
ESTABLISHED state. If connect() fails, the socket is no longer usable and
must be closed. We cannot call connect() again to the socket. In Figure
11.10, we will see that when we call connect() in a loop, trying each IP
address for a given host until one works, each time connect() fails, we
must close() the socket descriptor and call socket() again.
