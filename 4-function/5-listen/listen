The listen() function is called only by a TCP server and it performs two
actions:
1. When a socket is created by the socket() function, it is assumed to be an
active socket, this is, a client socket that will issue a connect(). The
listen() function converts an unconnected socket into a passive socket,
indicating that the kernel should accepe incoming connection requests
directed to this socket. In terms of the TCP state transition diagram, the
call to listen() moves the socket from the CLOSED state to the LISTEN state.
2. The second argument to this function specifies the maximum number of
connections the kernel should queue for this socket.
#include <sys/socket.h>
int listen(int sockfd, int backlog);
        Returns: 0 if OK, -1 on error
This function is normally called after both the socket() and bind()
functions and must be called before calling the accept() function.

To understand the backlog argument, we must realize that for a given
listening socket, the kernel maintains two queues:
1. An incomplete connection queue, which contains an entry for each SYN that
has arrived from a client for which the server is awaiting completion of the
TCP three-way handshake. The sockets are in the SYN_RCVD state.
2. A completed connection queue, which contains an entry for each client
with whom the TCP three-way handshake has completed. These sockets are in
the ESTABLISHED state.

Figure 4.7 depicts these two queues for a given listening socket.
    Figure 4.7. The two queues maintained by TCP for a listening socket.
 ----------
 | server |<--+                   +--> sum of both queues
 ----------   |accept             |    cannot exceed backlog
              |                   |
         -----+-------------------------------
         |    |                              |\
         |  -----    -----                   | |completed connection queue
         |  |   |    |   |                   | |(ESTABLISHED state)
         |  -----    -----                   |/
         |             ^ three-way           |
-------  |             | handshake           |
| TCP |  |             +-------+             |
-------  |            complete |             |\
         |  -----    -----    #####    ----- | |incomplete connection queue
         |  |   |    |   |    #   #    |   | | |(SYN_RCVD state)
         |  -----    -----    #####    ----- |/
         |                               ^   |
         --------------------------------|----
                                         |
                                      arriving
                                        SYN
When an entry is created on the incomplete queue, the parameters from the
listen socket are copied over to the newly created connection. The
connection mechanism is completely automatic; the server process is not
involved. Figure 4.8 depicts the packets exchanged during the connection
establishment with these two queues.
Figure 4.8.TCP three-way handshake and the two queues for a listening socket
         client                             server
               |                          |
connect called |\         SYN J           |
             / | \----------------------->|create entry on incomplete queue
        RTT |  |    SYN K,ACK J+1        /|\
            |  |<-----------------------/ | | RTT
             \ |                          | |
connect returns|\         ACK K+1         |/
               | \----------------------->|entry moved from incomplete queue
               |                          |to completed queue,
               |                          |accept() can return
When a SYN arrives from a client, TCP creates a new entry on the incomplete
queue and then responds with the second segment of the three-way handshake:
the server's SYN with an ACK of the client's SYN. This entry will remain on
the incomplete queue until the third segment of the three-way handshake
arrives (the client's ACK of the server's SYN), or until the entry times out
(Berkeley-derived implementations have a timeout of 75 seconds for these
incomplete entries). If the three-way handshake completes normally, the
entry moves from the incomplete queue to the end of the completed queue.
When the process calls accept(), the first entry on the completed queue is
returned to the process, or if the queue is empty, the process is put to
sleep until an entry is placed onto the completed queue.

There are several points to consider regarding the handling of these two
queues.
1. The backlog argument to the listen() function has historically specified
the maximum value for the sum of both queues.
2. Berkeley-derived implementations add a fudge factor to the backlog: It is
multiplied by 1.5. For example, the commonly specified backlog of 5 really
allows up to 8 queued entries on these systems.
3. Do not specify a backlog of 0, as different implementations interpret
this differently. If you do not want any clients connecting to your
listening socket, close the listening socket.
4. Assuming the three-way handshake completes normally (i.e., no lost
segments and no retransmissions), an entry remains on the incomplete
connection queue for one RTT, whatever that value happens to be between a
particular client and server.
5. Historically, sample code always shows a backlog of 5.
6. If the queues are full when a client SYN arrives, TCP ignores the
arriving SYN; it does not send an RST. This is because the condition is
considered temporary, and the client TCP will retransmit its SYN, hopefully
finding room on the queue in the near future. If the server TCP immediately
responded with an RST, the client's connect() would return an error, forcing
the application to handle this condition instead of letting TCP's normal
retransmissions take over. Also, the client could not differentiate between
an RST in response to a SYN meaning "there is no server at this port" versus
"there is a server at this port but its queues are full."
关于这一点,Linux的man listen手册有这样的描述:
If a connection request arrives when the queue is full, the client may
receive an error with an indication of ECONNREFUSED or, if the underlying
protocol supports retransmission, the request may be ignored so that a
later reattempt at connection succeeds.
7. Data that arrives after the three-way handshake completes, but before the
server calls accept(), should be queued by the server TCP, up to the size of
the connected socket's receive buffer.
