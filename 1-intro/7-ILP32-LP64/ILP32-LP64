During the mid to late 1990s, the trend began toward 64-bit architectures
and 64-bit software. One reason is for larger addressing within a process
(i.e., 64-bit pointers), which can address large amounts of memory. The
common programming model for existing 32-bit Unix systems is called the
ILP32 model, denoting that integers (I), long integers (L), and pointers
(P) occupy 32 bits. The model that is becoming most prevalent for 64-bit
Unix systems is called the LP64 model, meaning only long integers (L) and
pointers (P) require 64 bits. Figure 1.17 compares these two models.
    Figure 1.17. Comparison of number of bits to hold various datatypes
                    for the ILP32 and LP64 models.
               ---------------------------------------
               | Datatype | ILP32 model | LP64 model |
               =======================================
               | char     |       8     |      8     |
               | short    |      16     |     16     |
               | int      |      32     |     32     |
               | long     |      32     |     64     |
               | pointer  |      32     |     64     |
               --------------------------------------

From a programming perspective, the LP64 model means we cannot assume that
a pointer can be stored in an integer.

这里主要是想记录一下 ILP32 和 LP64 的概念.
